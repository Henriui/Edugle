scalar Date

type Chat {
	id: ID!
	created_date: Date!
	users: [UserInfo!]!
	messages: [Message]
}

input CreateChatInput {
	users: [ID!]!
}

type UpdateChatPayload {
	eventType: String!
	message: String!
	chat: Chat
	timestamp: Date!
}

type Query {
	# Returns a list of all chats in the database
	chats: [Chat]
	# Returns all chats for a given user
	chatsByUser(userToken: String!): [Chat]
	chatById(id: ID!): Chat
}

type Mutation {
	leaveChat(chatId: ID!, userToken: String!): Chat
	joinChat(chatId: ID!, userToken: String!): Chat
	createChat(chat: CreateChatInput): Chat
	deleteChatAsAdmin(chatId: ID!, userToken: String!): Chat
}

type Subscription {
	updatedChat(userId: ID!): UpdateChatPayload
}
