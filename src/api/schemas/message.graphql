scalar Date

type Message {
	id: ID!
	date: Date!
	content: String!
	sender: User!
}

type Query {
	# Returns all messages in the database
	messages: [Message]
	# Returns a message by its id
	messageById(messageId: ID!): Message
	# Returns all messages sent by a user
	messagesBySenderToken(userToken: String!): [Message]
	# Returns all messages sent by a user
	messagesBySenderId(userId: ID!): [Message]
}

input MessageInput {
	content: String!
	senderToken: String!
}

type MessageCreatedPayload {
	message: Message!
	chatId: ID!
	timestamp: Date!
}

type Subscription {
	messageCreated(chatId: ID!): MessageCreatedPayload
}

type Mutation {
	# Creates a message
	createMessage(chatId: ID!, message: MessageInput!): Message
	# Deletes a message corresponding to the given id and matching sender
	deleteMessage(messageId: ID!, userToken: String!): Message
	# Deletes any message corresponding to the given id as an admin
	deleteMessageAsAdmin(messageId: ID!, userToken: String!): Message
}
