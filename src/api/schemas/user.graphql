type User {
	id: ID!
	username: String!
	email: String!
	password: String
	description: String
	avatar: String
	lastLogin: Date
	role: String
}

type UserInfo {
	id: ID!
	username: String
	email: String
	description: String
	avatar: String
	lastLogin: Date
}

type TokenMessage {
	token: String
	message: String!
	user: User!
}

input LoginInput {
	email: String!
	password: String!
}

input RegisterInput {
	username: String!
	email: String!
	password: String!
	description: String
	avatar: String
	role: String
}

input deleteUserAsAdminInput {
	id: ID!
	token: String!
}

input UserWithTokenInput {
	token: String!
	id: ID
}

input AdminWithTokenInput {
	token: String!
	id: ID
	role: String!
}

type UserStatus {
		userId: ID!
    isOnline: Boolean!
}

type Query {
	# Get all users from database
	users(token: String!): [User]
	# Gets user corresponding to the given id
	getUserById(id: ID!): User
	# Validates the given token
	validateToken: TokenMessage
	getUserByToken(token: String!): User
}

type Subscription {
	userOnlineStatus(userId: ID!): UserStatus!
}

type Mutation {
	# Logs in user with given credentials
	loginUser(credentials: LoginInput!): TokenMessage
	# Registers user with given information
	registerUser(user: RegisterInput!): TokenMessage
	# Deletes user corresponding to the given token
	deleteUser(token: String): TokenMessage
	# Deletes user corresponding to the given id as admin
	deleteUserAsAdmin(user: deleteUserAsAdminInput, deleteUserID: ID!): TokenMessage
	updateUserStatus(token: String, status: String): Boolean
}
