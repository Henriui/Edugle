# User with all fields
type User {
	# Unique identifier generated by database
	id: ID!
	# Username of user
	username: String!
	# Email of user
	email: String!
	# Password of user
	password: String!
	# Description of user
	description: String
	# Avatar of user
	avatar: String
	# Last login of user
	lastLogin: Date
	# Role of user
	role: String
}

# User without password and role
type UserInfo {
	id: ID!
	username: String
	email: String
	description: String
	avatar: String
	lastLogin: Date
}

type TokenMessage {
	token: String
	message: String!
	user: User!
}

# User input for login
input LoginInput {
	email: String!
	password: String!
}

# User input for register
input RegisterInput {
	username: String!
	email: String!
	password: String!
	description: String
	avatar: String
	role: String
}

# User input for user deletion as admin
input deleteUserAsAdminInput {
	id: ID!
	token: String!
}

# User input when token and id are needed
input UserWithTokenInput {
	token: String!
	id: ID
}

# Admin input when token, id and role are needed
input AdminWithTokenInput {
	token: String!
	id: ID
	role: String!
}

type Query {
	# Get all users from database
	users(token: String!): [User]
	# Gets user corresponding to the given id
	getUserById(id: ID!): User
	# Validates the given token
	validateToken: TokenMessage
}

type Mutation {
	# Logs in user with given credentials
	loginUser(credentials: LoginInput!): TokenMessage
	# Registers user with given information
	registerUser(user: RegisterInput!): TokenMessage
	# Deletes user corresponding to the given token
	deleteUser(token: String): TokenMessage
	# Deletes user corresponding to the given id as admin
	deleteUserAsAdmin(user: deleteUserAsAdminInput, deleteUserID: ID!): TokenMessage
}
