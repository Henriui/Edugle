type User {
	id: ID!
	username: String!
	email: String!
	password: String!
	description: String
	avatar: String
	lastLogin: Date
	role: String
}

type UserInfo {
	id: ID!
	username: String
	email: String
	description: String
	avatar: String
	lastLogin: Date
}

type TokenMessage {
	token: String
	message: String!
	user: User!
}

input LoginInput {
	email: String!
	password: String!
}

input RegisterInput {
	username: String!
	email: String!
	password: String!
	description: String
	avatar: String
	role: String
}

input deleteUserAsAdminInput {
	id: ID!
	token: String!
}

input UserWithTokenInput {
	token: String!
	id: ID!
}

type Query {
	users(token: String!): [User]
	getUserById(id: ID!): User
	validateToken: TokenMessage
}

type Mutation {
	loginUser(credentials: LoginInput!): TokenMessage
	registerUser(user: RegisterInput!): TokenMessage
	deleteUser(token: String): TokenMessage
	deleteUserAsAdmin(user: deleteUserAsAdminInput, deleteUserID: ID!): TokenMessage
}
